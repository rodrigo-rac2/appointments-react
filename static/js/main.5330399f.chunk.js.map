{"version":3,"sources":["components/Form.js","components/Appointment.js","App.js","serviceWorker.js","index.js"],"names":["Form","_ref","createAppointment","_useState","useState","pet","owner","date","time","symptoms","_useState2","_slicedToArray","appointment","updateAppointment","updateState","event","_objectSpread","_defineProperty","target","name","value","_useState3","_useState4","error","updateError","React","createElement","Fragment","data-testid","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","Appointment","deleteAppointment","onClick","App","initialAppointments","JSON","parse","localStorage","getItem","appointments","saveAppointments","useEffect","setItem","stringify","newAppointments","filter","titulo","length","concat","_toConsumableArray","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5330399f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport uuid from 'uuid/v4';\nimport PropTypes from 'prop-types'\n\nconst Form = ({ createAppointment }) => {\n\t//Create State de Appointments\n\tconst [appointment, updateAppointment] = useState({\n\t\tpet: '',\n\t\towner: '',\n\t\tdate: '',\n\t\ttime: '',\n\t\tsymptoms: ''\n\t});\n\n\tconst updateState = (event) => {\n\t\tupdateAppointment({\n\t\t\t...appointment,\n\t\t\t[event.target.name]: event.target.value\n\t\t});\n\t};\n\n\tconst [error, updateError] = useState(false)\n\n\tconst submitAppointment = (event) => {\n\t\tevent.preventDefault();\n\n\t\t//Validate\n\t\tif (appointment.pet.trim() === '' || appointment.owner.trim() === '' || appointment.date.trim() === '' || appointment.time.trim() === '' || appointment.symptoms.trim() === '') {\n\t\t\tupdateError(true);\n\t\t\treturn;\n\t\t}\n\n\t\t//Delete error\n\t\tupdateError(false);\n\n\t\t//Assign Id\n\t\tappointment.id = uuid();\n\n\t\t//Create Appointment\n\t\tcreateAppointment(appointment);\n\n\t\t//Restart form\n\t\tupdateAppointment({\n\t\t\tpet: '',\n\t\t\towner: '',\n\t\t\tdate: '',\n\t\t\ttime: '',\n\t\t\tsymptoms: ''\n\t\t})\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<h2 data-testid=\"Title\">Create Appointment</h2>\n\n\t\t\t{error ? <p data-testid=\"alert\" className=\"alert-error\">All fields are required</p> : null}\n\n\t\t\t<form onSubmit={submitAppointment}>\n\t\t\t\t<label>Pet Name</label>\n\t\t\t\t<input\n\t\t\t\t\tdata-testid=\"pet\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"pet\"\n\t\t\t\t\tclassName=\"u-full-width\"\n\t\t\t\t\tplaceholder=\"Pet Name\"\n\t\t\t\t\tonChange={updateState}\n\t\t\t\t\tvalue={appointment.pet}\n\t\t\t\t/>\n\n\t\t\t\t<label>Owner Name</label>\n\t\t\t\t<input\n\t\t\t\t\tdata-testid=\"owner\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"owner\"\n\t\t\t\t\tclassName=\"u-full-width\"\n\t\t\t\t\tplaceholder=\"Owner Name\"\n\t\t\t\t\tonChange={updateState}\n\t\t\t\t\tvalue={appointment.owner}\n\t\t\t\t/>\n\n\t\t\t\t<label>Date</label>\n\t\t\t\t<input\n\t\t\t\t\tdata-testid=\"date\"\n\t\t\t\t\ttype=\"date\"\n\t\t\t\t\tname=\"date\"\n\t\t\t\t\tclassName=\"u-full-width\"\n\t\t\t\t\tonChange={updateState}\n\t\t\t\t\tvalue={appointment.date}\n\t\t\t\t/>\n\n\t\t\t\t<label>Time</label>\n\t\t\t\t<input data-testid=\"time\" type=\"time\" name=\"time\" className=\"u-full-width\" onChange={updateState} value={appointment.time} />\n\n\t\t\t\t<label>Symptoms</label>\n\t\t\t\t<textarea data-testid=\"symptoms\" className=\"u-full-width\" name=\"symptoms\" onChange={updateState} value={appointment.symptoms} />\n\n\t\t\t\t<button data-testid=\"btn-submit\" type=\"submit\" className=\"u-full-witdth button-primary\">\n\t\t\t\t\tAdd Appointment\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t</>\n\t);\n}\n\nForm.propTypes = {\n\tcreateAppointment: PropTypes.func.isRequired\n}\n\nexport default Form;\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nconst Appointment = ({ appointment, deleteAppointment }) => (\n    <div data-testid=\"appointment\" className=\"appointment\">\n        <p>Pet: <span>{appointment.pet}</span></p>\n        <p>Owner: <span>{appointment.owner}</span></p>\n        <p>Date: <span>{appointment.date}</span></p>\n        <p>Time: <span>{appointment.time}</span></p>\n        <p>Symptoms: <span>{appointment.symptoms}</span></p>\n\n        <button\n            className=\"button delete u-full-width\"\n            onClick={() => deleteAppointment(appointment.id)}\n            data-testid=\"btn-delete\"\n        >\n            Delete\n        </button>\n    </div>\n);\n\nAppointment.propTypes = {\n    appointment: PropTypes.object.isRequired,\n    deleteAppointment: PropTypes.func.isRequired\n}\nexport default Appointment;","import React, { useState, useEffect } from 'react';\nimport Form from './components/Form'\nimport Appointment from './components/Appointment'\n\nfunction App() {\n    //Appointments in localStorage\n    let initialAppointments = JSON.parse(localStorage.getItem('appointments'));\n    if (!initialAppointments) {\n        initialAppointments = [];\n    }\n\n    //Appoinments Array\n    const [appointments, saveAppointments] = useState(initialAppointments);\n\n    //Used when the state changes\n    useEffect(() => {\n        if (initialAppointments) {\n            localStorage.setItem('appointments', JSON.stringify(appointments));\n        } else {\n            localStorage.setItem('appointments', JSON.stringify([]));\n        }\n    }, [appointments, initialAppointments]);\n\n\n\n    // Add appointment\n    const createAppointment = appointment => {\n        saveAppointments([...appointments, appointment]);\n    }\n\n    // Delete appointment\n    const deleteAppointment = id => {\n        const newAppointments = appointments.filter(appointment => appointment.id !== id);\n        saveAppointments(newAppointments);\n    }\n\n    // Conditional Message\n    const titulo = appointments.length === 0 ? 'There are no appointments' : 'Manage your appointments'\n\n\n    return (\n        <>\n            <h1 data-testid=\"app-name\">Appointment Management</h1>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"one-half column\">\n                        <Form\n                            createAppointment={createAppointment}\n                        />\n                    </div>\n                    <div className=\"one-half column\">\n                        <h2 data-testid=\"dynamic-title\">{titulo}</h2>\n                        {appointments.map(appointment => (\n                            <Appointment\n                                key={appointment.id}\n                                appointment={appointment}\n                                deleteAppointment={deleteAppointment}\n                            />\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}